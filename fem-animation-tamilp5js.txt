let matrixA = [
  [1, 0, 0],
  [0, 2, 0],
  [0, 0, 3]
];
let matrixB = [
  [4, 0, 0],
  [0, 5, 0],
  [0, 0, 6]
];

let slider;
let i = 0;
let j = 0;
let canvasSize = 400;
let gridSize = 3; // Size of the matrix

function setup() {
  createCanvas(canvasSize, canvasSize);
  
  // Create a slider for controlling the animation
  slider = createSlider(0, gridSize - 1, 0, 1);
  slider.position(10, height + 10);
  slider.style('width', `${width - 20}px`);
}

function draw() {
  background(255);
  
  let sliderValue = slider.value();
  
  // Display the matrices
  drawMatrix(matrixA, 0, 0);
  drawMatrix(matrixB, width / 2, 0);
  
  // Highlight the row and column being processed
  i = sliderValue; // Row
  j = sliderValue; // Column
  
  drawHighlight(i, j);
}

// Function to draw a matrix
function drawMatrix(matrix, offsetX, offsetY) {
  let cellSize = 50;
  stroke(0);
  noFill();
  for (let r = 0; r < gridSize; r++) {
    for (let c = 0; c < gridSize; c++) {
      rect(offsetX + c * cellSize, offsetY + r * cellSize, cellSize, cellSize);
      textAlign(CENTER, CENTER);
      text(matrix[r][c], offsetX + c * cellSize + cellSize / 2, offsetY + r * cellSize + cellSize / 2);
    }
  }
}

// Function to highlight the current row and column
function drawHighlight(i, j) {
  let cellSize = 50;
  let offsetX = 0;
  let offsetY = 0;

  // Highlight the current row
  for (let c = 0; c < gridSize; c++) {
    fill(255, 0, 0, 100); // Red highlight
    rect(offsetX + c * cellSize, offsetY + i * cellSize, cellSize, cellSize);
  }
  
  // Highlight the current column
  for (let r = 0; r < gridSize; r++) {
    fill(255, 0, 0, 100); // Red highlight
    rect(offsetX + j * cellSize, offsetY + r * cellSize, cellSize, cellSize);
  }
  
  // Highlight the selected cell
  fill(255, 0, 0);
  ellipse(offsetX + j * cellSize + cellSize / 2, offsetY + i * cellSize + cellSize / 2, 20, 20);
}
